<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>_mike</title>
    <link href="https://mpardalos.xyz/atom.xml" rel="self" />
    <link href="https://mpardalos.xyz" />
    <id>https://mpardalos.xyz/atom.xml</id>
    <author>
        <name>Michail Pardalos</name>
        <email>mpardalos@gmail.com</email>
    </author>
    <updated>2019-08-23T00:00:00Z</updated>
    <entry>
    <title>Customizable Datatypes</title>
    <link href="https://mpardalos.xyz/posts/customizable_datatypes.html" />
    <id>https://mpardalos.xyz/posts/customizable_datatypes.html</id>
    <published>2019-08-23T00:00:00Z</published>
    <updated>2019-08-23T00:00:00Z</updated>
    <summary type="html"><![CDATA[Posted on <time>August 23, 2019</time>

<p>This post is based on a post here: <a href="https://mazzo.li/posts/customizable-data-types.html">https://mazzo.li/posts/customizable-data-types.html</a> I suggest reading that post first. It’s a very short (but quite interesting) read. I will, however, give a quick summary here.</p>
<p>I recently decided to use this pattern on my pet language project, Kima. I had a problem with the number of parameters on my AST type getting out of hand. I have to make multiple changes to it on the way from parsing to interpretation/compilation and so it needs to be heavily parameterized, nodes have to be enabled/disabled, etc. This pattern allows parameters to be added in an easy way without cluttering up type signatures and has helped clean up a lot of code.</p>
<p>The code here will require the following GHC extensions:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1"></a><span class="ot">{-# LANGUAGE GADTs #-}</span></span>
<span id="cb1-2"><a href="#cb1-2"></a><span class="ot">{-# LANGUAGE DataKinds #-}</span></span>
<span id="cb1-3"><a href="#cb1-3"></a><span class="ot">{-# LANGUAGE TypeFamilies #-}</span></span></code></pre></div>
<h1 id="original-article">Original article</h1>
<p>Essentially, the author describes a way to reduce the number of type parameters to a data type to a single “index” type parameter. They do that by introducing a single “index” type parameter as well as a set of type families which operate on that “index”.</p>
<p>So for example, this:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1"></a><span class="kw">data</span> <span class="dt">ExprBasic</span> hasIf var <span class="kw">where</span></span>
<span id="cb2-2"><a href="#cb2-2"></a>    <span class="dt">IfBasic</span><span class="ot"> ::</span> <span class="dt">ExprBasic</span> <span class="dt">&#39;True</span> var <span class="ot">-&gt;</span> <span class="dt">ExprBasic</span> <span class="dt">&#39;True</span> var <span class="ot">-&gt;</span> <span class="dt">ExprBasic</span> <span class="dt">&#39;True</span> var</span>
<span id="cb2-3"><a href="#cb2-3"></a>        <span class="ot">-&gt;</span> <span class="dt">ExprBasic</span> <span class="dt">&#39;True</span> var</span>
<span id="cb2-4"><a href="#cb2-4"></a>    <span class="dt">VarBasic</span><span class="ot"> ::</span> var</span>
<span id="cb2-5"><a href="#cb2-5"></a>        <span class="ot">-&gt;</span> <span class="dt">ExprBasic</span> hasIf var</span></code></pre></div>
<p>becomes this:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1"></a><span class="co">-- Full path to a name</span></span>
<span id="cb3-2"><a href="#cb3-2"></a><span class="kw">newtype</span> <span class="dt">QualName</span> <span class="ot">=</span> <span class="dt">QualName</span> [<span class="dt">String</span>]</span>
<span id="cb3-3"><a href="#cb3-3"></a></span>
<span id="cb3-4"><a href="#cb3-4"></a><span class="kw">data</span> <span class="dt">Parsed</span></span>
<span id="cb3-5"><a href="#cb3-5"></a><span class="kw">data</span> <span class="dt">Renamed</span></span>
<span id="cb3-6"><a href="#cb3-6"></a></span>
<span id="cb3-7"><a href="#cb3-7"></a><span class="kw">type</span> <span class="kw">family</span> <span class="dt">Var</span><span class="ot"> idx ::</span> <span class="op">*</span> <span class="kw">where</span></span>
<span id="cb3-8"><a href="#cb3-8"></a>    <span class="dt">Var</span> <span class="dt">Parsed</span> <span class="ot">=</span> <span class="dt">String</span></span>
<span id="cb3-9"><a href="#cb3-9"></a>    <span class="dt">Var</span> <span class="dt">Renamed</span> <span class="ot">=</span> <span class="dt">QualName</span></span>
<span id="cb3-10"><a href="#cb3-10"></a></span>
<span id="cb3-11"><a href="#cb3-11"></a><span class="kw">type</span> <span class="kw">family</span> <span class="dt">HasIf</span><span class="ot"> idx ::</span> <span class="dt">Bool</span> <span class="kw">where</span></span>
<span id="cb3-12"><a href="#cb3-12"></a>    <span class="dt">HasIf</span> <span class="dt">Parsed</span> <span class="ot">=</span> <span class="dt">&#39;True</span></span>
<span id="cb3-13"><a href="#cb3-13"></a>    <span class="dt">HasIf</span> <span class="dt">Renamed</span> <span class="ot">=</span> <span class="dt">&#39;True</span></span>
<span id="cb3-14"><a href="#cb3-14"></a><span class="co">-- Maybe some later stage desugars ifs into something else</span></span>
<span id="cb3-15"><a href="#cb3-15"></a></span>
<span id="cb3-16"><a href="#cb3-16"></a><span class="kw">data</span> <span class="dt">Expr</span> idx <span class="kw">where</span></span>
<span id="cb3-17"><a href="#cb3-17"></a>  <span class="dt">If</span><span class="ot"> ::</span> <span class="dt">HasIf</span> idx <span class="op">~</span> <span class="dt">&#39;True</span> <span class="ot">=&gt;</span> <span class="dt">Expr</span> idx <span class="ot">-&gt;</span> <span class="dt">Expr</span> idx <span class="ot">-&gt;</span> <span class="dt">Expr</span> idx <span class="ot">-&gt;</span> <span class="dt">Expr</span> idx</span>
<span id="cb3-18"><a href="#cb3-18"></a>  <span class="dt">Var</span><span class="ot"> ::</span> <span class="dt">Var</span> idx <span class="ot">-&gt;</span> <span class="dt">Expr</span> idx</span></code></pre></div>
<h1 id="benefits">Benefits</h1>
<p>Obviously the second version is a lot more code but it does allow for some interesting differences from the first.</p>
<ol>
<li><p>If we add a parameter to <code>Expr</code> we don’t have to change every signature where that type appears.</p></li>
<li><p>I would argue that it shows intent a lot better than the original. Compare</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1"></a><span class="ot">f ::</span> <span class="dt">Expr</span> <span class="dt">Parsed</span> <span class="ot">-&gt;</span> <span class="dt">Expr</span> <span class="dt">Renamed</span></span></code></pre></div>
<p>to</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1"></a><span class="ot">f ::</span> <span class="dt">Expr</span> <span class="dt">&#39;True</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Expr</span> <span class="dt">&#39;True</span> <span class="dt">QualName</span></span></code></pre></div>
<p>You could type synonyms to make the second look more like the first, and it would make the type signatures a lot cleaner but they won’t show up in error messages, where you will have to decypher what each type parameter means.</p></li>
<li><p>With the closed type families used in the example, we can clearly enumerate all the possible configurations our Expr type could be in.</p></li>
</ol>
<h1 id="using-associated-type-families">Using associated type families</h1>
<p>The way I use this pattern is a little different from the original is in how I use type families. The original article used closed type families. I have a few problems with this choice.</p>
<ul>
<li>It doesn’t allow adding more stages (although the author does suggest using open type families which would fix this)</li>
<li>It doesn’t give a compiler warning if a stage has some necessary variable missing. This will give cryptic errors in the form <code>Var t does not equal
 String</code>, <strong>at the call site</strong> because of the way type families are evaluated.</li>
<li>It spreads out the definition of each data type across type family definitions (This could also be fixed by using open type families)</li>
</ul>
<p>We can fix all of the above by grouping all the type families into a typeclass as associated types like so:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1"></a><span class="kw">class</span> <span class="dt">ExprIndex</span> idx <span class="kw">where</span></span>
<span id="cb6-2"><a href="#cb6-2"></a>  <span class="kw">type</span> <span class="dt">Var</span><span class="ot"> idx ::</span> <span class="op">*</span></span>
<span id="cb6-3"><a href="#cb6-3"></a>  <span class="kw">type</span> <span class="dt">HasIf</span><span class="ot"> idx ::</span> <span class="dt">Bool</span></span>
<span id="cb6-4"><a href="#cb6-4"></a></span>
<span id="cb6-5"><a href="#cb6-5"></a><span class="kw">instance</span> <span class="dt">ExprIndex</span> <span class="dt">Parsed</span> <span class="kw">where</span></span>
<span id="cb6-6"><a href="#cb6-6"></a>  <span class="kw">type</span> <span class="dt">Var</span> <span class="dt">Parsed</span> <span class="ot">=</span> <span class="dt">String</span></span>
<span id="cb6-7"><a href="#cb6-7"></a>  <span class="kw">type</span> <span class="dt">HasIf</span> <span class="dt">Parsed</span> <span class="ot">=</span> <span class="dt">True</span></span>
<span id="cb6-8"><a href="#cb6-8"></a></span>
<span id="cb6-9"><a href="#cb6-9"></a><span class="kw">instance</span> <span class="dt">ExprIndex</span> <span class="dt">Renamed</span> <span class="kw">where</span></span>
<span id="cb6-10"><a href="#cb6-10"></a>  <span class="kw">type</span> <span class="dt">Var</span> <span class="dt">Parsed</span> <span class="ot">=</span> <span class="dt">QualName</span></span>
<span id="cb6-11"><a href="#cb6-11"></a>  <span class="kw">type</span> <span class="dt">HasIf</span> <span class="dt">Parsed</span> <span class="ot">=</span> <span class="dt">True</span></span></code></pre></div>
<p>I find this much more pleasing to read and it also gives a warning if we miss a a definition for one of the indices.</p>
<h1 id="warning-prefer-concrete-types">Warning: Prefer concrete types!</h1>
<p>When I first started with this pattern, I tried using polymorphic functions, and only constraining the parameters that would be transformed. For example:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1"></a>rename</span>
<span id="cb7-2"><a href="#cb7-2"></a><span class="ot">  ::</span> (<span class="dt">Var</span> idx2 <span class="op">~</span> <span class="dt">QualName</span>, <span class="dt">HasIf</span> idx1 <span class="op">~</span> <span class="dt">HasIf</span> idx2)</span>
<span id="cb7-3"><a href="#cb7-3"></a>  <span class="ot">=&gt;</span> <span class="dt">Expr</span> idx1 <span class="ot">-&gt;</span> <span class="dt">Expr</span> idx2</span>
<span id="cb7-4"><a href="#cb7-4"></a>rename expr <span class="ot">=</span> <span class="op">...</span></span></code></pre></div>
<p>This style works ok for traversals and other simple functions that have no intermediate stages, but in more complicated transformations type inference can be an issue. There will very often be errors involving ambiguous type variables or unresolved type families. Therefore, I suggest leaving the polymorphic types for the functions that will be widely used throughout your application (like traversals) and prefering monomorphic types wherever possible elsewhere.</p>
]]></summary>
</entry>
<entry>
    <title>On static sites</title>
    <link href="https://mpardalos.xyz/posts/pelican_blog.html" />
    <id>https://mpardalos.xyz/posts/pelican_blog.html</id>
    <published>2018-09-01T00:00:00Z</published>
    <updated>2018-09-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[Posted on <time>September  1, 2018</time>

<p>For the past few days I have been working almost exclusively on the site. Starting a new project is always exciting, and so I’m trying to take advantage of that initial momentum as much as possible before it inevitably dies off.</p>
<p>Aside from the excitement for design and content of the blog, however, I also really enjoy using the technology that is powering it. That being a <strong>static site generator</strong>, specifically <a href="https://getpelican.com">Pelican</a>. So I wanted to share a bit about my setup and how it’s working out so far.</p>
<p>First of all, an overview. What a static site generator (or SSG) like Pelican does, is essentially very simple: It takes a directory full of content and a directory of templates and combines the two to create a site as just a flat directory of static files. That can then be deployed on any kind of host you want, from Amazon S3 to a raspberry pi, to a static-site-focused service like <a href="https://netlify.com">Netlify</a> (what this site is using). The final site needs no database or server-side rendering, it’s just served as-is to the user. Good old static HTML/CSS/JS.</p>
<p>While this might sound somewhat limiting, it’s actually more than enough for most websites — and definitely for a blog. Anything you might have wanted to do using, for example, Wordpress you can probably do either at build time using the SSG or using client-side JavaScript: Inserting common features between pages (e.g. a sidebar), minifying CSS, transpiling to JS, are all easy-to-trivial. Anything more dynamic that you might think you need a backend for, you can probably achieve using either an external service (e.g. <a href="https://disqus.com">Disqus</a> for the comments and reactions below), an AWS Lambda function (which Netlify manages for you), or just plain old JavaScript.</p>
<h2 id="pelican">Pelican</h2>
<p>So, on to the specifics of my setup. As I said, I’m using a python-based SSG called <a href="https://getpelican.com">Pelican</a>. Pelican uses Jinja 2 for its templates which you should be familiar with if you’ve ever used Flask. Building is handled through the <code>pelican</code> command and a python-based config file (<code>pelicanconf.py</code>). Pelican also provides a utility called <code>pelican-quickstart</code> to generate the initial skeleton for the project.</p>
<p>With that said, the file structure for this blog looks like this:</p>
<figure>
<img src="/images/blog_file_structure.png" alt="" /><figcaption>File structure for the blog</figcaption>
</figure>
<ul>
<li><code>content/</code> contains all of the actual, well, content of the site. That includes articles and images, as well as anything else I might want to upload to the site. If, say, I want to upload a PDF CV at some point, it goes in here.</li>
<li><code>themes/pelican-hyde/</code> contains the theme of the site. That includes templates, CSS, and any global JS I might want to include (e.g. Google analytics scripts). More on this later.</li>
<li><code>pelicanconf.py</code> is the config file for pelican. It contains site settings like my contact details, the name of the RSS feed, and much more. There is no actual dynamic python in there, it’s simply a bunch of variable declarations that are imported by pelican.</li>
<li><code>Pipfile</code> contains the blog’s dependencies to be managed by <a href="https://github.com/pypa/pipenv">pipenv</a>.</li>
<li>The <code>Makefile</code> contains targets for the common tasks that are run during development (build, clean, deploy, etc.).</li>
</ul>
<p>The theme I’m using is based on <a href="https://github.com/jvanz/pelican-hyde">pelican-hyde</a>. I’m maintaining a personal fork of it <a href="https://gitlab.com/michalis_pardalos/pelican-hyde">here</a>, — that is what you’re seeing right now. VSCode makes it very simple to manage both, both the base repo and the submodule show up in the version control tab and provides the same tools for both the root repo and the submodule.</p>
<h2 id="netlify">Netlify</h2>
<p>The second most important component in this blog would have to be <a href="https://netlify.com">Netlify</a>. At first it appears like a simple hosting provider with some extra bells and whistles. But it’s so much more than that. It collects CI, Hosting, DNS, HTTPS certificates under one service; and that is <strong>just</strong> the things I’m using for my simple blog! It also provides authentication, forms, management for AWS lambda functions, and so much more.</p>
<p>All I had to do on netlify for hosting was login to my gitlab account, choose the blog repo, and provide the command to build the site. Netlify then builds the site whenever I push to gitlab. It even detected the dependencies from my <code>Pipfile</code> automatically! Then, I could transfer my domain to Netlify and it generated a let’s encrypt certificate with a single click.</p>
<p>I honestly can’t praise Netlify enough. While it might present issues at bigger scales or edge cases, for my humble blog, it is godsend.</p>
<h2 id="conclusion">Conclusion</h2>
<p>After the little effort I’ve spent setting this up, I can say it was a very successful project. The blog looks as good as I could hope for with the effort I’ve put in and making changes couldn’t be easier. While this is a very small project, I’m sure that static site generators are a much more powerful tool than a lot of people might think. Give one a try for your next project. It might surprise you.</p>
]]></summary>
</entry>
<entry>
    <title>Starting a blog</title>
    <link href="https://mpardalos.xyz/posts/starting_a_blog.html" />
    <id>https://mpardalos.xyz/posts/starting_a_blog.html</id>
    <published>2018-08-21T00:00:00Z</published>
    <updated>2018-08-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[Posted on <time>August 21, 2018</time>

<p>Let’s put something up as a first entry shall we?</p>
<p>I have been meaning to start this for a while now but I was always hesitant. Do I have anything to say? Even if I do have something, is it really that important? Will anyone really care? Questions I’m sure most other writers have also struggled with. In the end my desire to just get my thoughts written down somewhere just overcame my doubts. And so here we are.</p>
<p>Little bit about myself: My name is Mike (lie: It’s actually Μιχάλης, pronounced Michalis, but let’s not) I’m a second year student of Imperial College London, studying Electronic and Information Engineering, think Electrical Engineering but with a twist of Computer Science. I’ve been programming for basically as long as I remember and I don’t see any signs of getting tired anytime soon. At the moment I’m mostly interested in programming language theory and implementation and so I’m currently working on a programming language called <a href="https://gitlab.com/michalis_pardalos/Kima">Kima</a> as an experiment (something which I am really itching to write about) while also trying to come into contact with as many languages as I can. When I’m not coding I usually want to be out on the street, taking photos, even though there isn’t always enough motivation to actually get me to do that.</p>
<p>I’m not exactly sure what the content of this blog will be. I’m just writing about whatever I feel like at the time, which, for now, is mostly technical articles about my current fascination with programming language development and theory (for however little I know). That topic being just what is taking up most space in my mind at the time of writing this post. It’s possible that it changes soon and I would also like to have a few non-technical articles every once in a while. More specifically, My current plan is to document the development of <a href="https://gitlab.com/michalis_pardalos/Kima">Kima</a> as it goes along. I think I have some possibly interesting ideas for this language and I want to see people’s opinions about it.</p>
<p>Not much more to say about me or my plans, so I just hope you enjoy reading my ramblings from now on and that I actually keep posting here.</p>
]]></summary>
</entry>

</feed>
